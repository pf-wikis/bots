@import java.util.List
@import java.util.Map
@import com.google.common.collect.Range

@args(Map<String, List<Range<Integer>>> ranges, RockerContent prefix, RockerContent suffix)

@content => {
	@for((value,ranges):ranges) {
		@if(value == null || value.isEmpty()) {
			@*we do not need this range*@
		}
		else if(ranges.size()==1 && !ranges.get(0).hasLowerBound() && !ranges.get(0).hasUpperBound()) {
			@*if only one range matching everything*@
			@value
		}
		else if(
				ranges.size()==1
				&& ranges.get(0).hasLowerBound()
				&& ranges.get(0).hasUpperBound()
				&& ranges.get(0).lowerEndpoint()+1 == ranges.get(0).upperEndpoint()
		) {
			@*if only one page*@
			@{@{#ifeq:
				{{{1}}}
			|
				@ranges.get(0).lowerEndpoint()
			|
				@value
			@}@}
		}
		else {
			@{@{#ifexpr:
				@for((it,range):ranges) {
					@if(!it.first()){ or }
					(
						@if(range.hasLowerBound()){
							{{{1}}}>=@range.lowerEndpoint()
							@if(range.hasUpperBound()){ and }
						}
						@if(range.hasUpperBound()){
							{{{1}}}<@range.upperEndpoint()
						}
					)
				}
			|
				@value
			@}@}
		}
	}
}

@with(hasValue=RangeHelper.toHasValueRanges(ranges)) {
	@if(hasValue.encloses(Range.all())) {
		@?prefix
		@content
		@?suffix
	}
	else {
		{{#ifexpr:
			@for((it,range):hasValue.asRanges()) {
				@if(!it.first()){ or }
				(
					@if(range.hasLowerBound()){
						{{{1}}}>=@range.lowerEndpoint()
						@if(range.hasUpperBound()){ and }
					}
					@if(range.hasUpperBound()){
						{{{1}}}<@range.upperEndpoint()
					}
				)
			}
		|
			@?prefix
			@content
			@?suffix
		}}
	}
}
