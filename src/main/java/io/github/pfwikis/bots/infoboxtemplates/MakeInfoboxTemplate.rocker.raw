@import static io.github.pfwikis.bots.facts.model.SDIPropertyTypeMapping.*
@import static org.apache.commons.lang3.StringUtils.startsWith
@import java.util.Set
@import java.util.List
@import io.github.pfwikis.bots.common.model.SemanticSubject
@import io.github.pfwikis.bots.facts.model.SDIConcept
@import io.github.pfwikis.bots.common.bots.Run.SingleRun

@args(SingleRun run, List<SDIConcept> concepts, SemanticSubject page)
<noinclude>
{{Bot created|Bot Infobox Maker|This template is automatically created from [[Created from::@page.getSubject().toFullTitle()]].}}
</noinclude>
@for(SDIConcept concept:concepts) {
	@if(!page.hasConcept(concept)) {
		@continue
	}
	<div class="infobox @concept.toCSSName()">
		<div class="name">
			@if(page.has(FULL_TITLE)) {
				@page.get(FULL_TITLE)
			}
			else {
				@page.get(NAME)
			}
		</div>
		@if(run.getWiki().pageExists(page.get(IMAGE))) {
			<div class="image">[[File:@page.get(IMAGE).getTitle()|250px|Cover Image|class=not-lazy]]</div>
		}
		@if(page.has(WEBSITE)) {
			<div class="website">
				[@page.get(WEBSITE) @page.getOr(PUBCODE, "Publisher's product page")]
			</div>
		}
		<div class="type">
			@concept.getName() @*<-important space*@
			@with(type = prop(String.class, concept.getName()+" type")) {
				@if(page.has(type)) {
					- page.get(type)
				}
			}
		</div>
		<div class="table">
			@for(prop:concept.getInfoboxProperties()) {
				@if(page.has(prop)) {
					<div class="key">@prop.infoboxLabel(page.getAll(prop))</div>
					<div>@prop.infoboxValue(run.getWiki(), page.getAll(prop))</div>
				}
			}
	
			@*releases for this book*@
			@with(releases = page.getSubObjects("Facts/"+concept.getName()+"/Release")) {
			@if(!releases.isEmpty()) {
				<div class="infobox-book-releases">
					<div class="infobox-book-releases-title">Releases</div>
					
					sort=Release date,Release type
					@for(release:releases) {
						@*
						<div class="name">{{{Release type|}}}{{#if:{{{Release note|}}}|&nbsp;({{{Release note}}})}}</div>
						<div class="table">
							{{#if:{{{Release date|}}}|<div class="key">Date</div><div>{{{Release date}}}</div>}}
							{{#if:{{{Isbn|}}}|<div class="key">ISBN</div><div>{{ISBN|{{{Isbn}}}}}</div>}}
							{{#if:{{{Pages|}}}|<div class="key">Pages</div><div>{{{Pages|}}}</div>}}
							{{#if:{{{Rule system|}}}|<div class="key">Rule set</div><div>{{{Rule system}}}</div>}}
							{{#if:{{{Price|}}}|<div class="key">Price</div><div>{{{Price}}}</div>}}
						</div>*@
					}
				</div>
			}}
			@if(page.has(GALLERY_PAGE)) {
				<div class="full-width works-by">
					[[:@page.get(GALLERY_PAGE).toFullTitle()|Artwork from this book]]
				</div>
			}
		</div>
	</div>
	
	<includeonly>
	@*Categories based on the properties.*@
	@if(concept.containsProperty("Errata")) {
		{{#if:{{{Errata|}}}|[[Category:Products with errata]]}}
	}
	@if(concept.containsProperty("Web enhancement")) {
		{{#if:{{{Web enhancement|}}}|[[Category:Products with web enhancements]]}}
	}
	@if(concept.containsProperty("Author")) {
		{{#if: {{{Author all|}}}|{{#arraymap:{{{Author all|}}}|;|x|[[Category:Works by {{#getdisplaytitle:x}}]]|}}}}
	}
	@if(concept.containsProperty("Artist")) {
		{{#if: {{{Artist|}}}|{{#arraymap:{{{Artist|}}}|;|x|[[Category:Artwork by {{#getdisplaytitle:x}}]]|}}}}
	}
	@if(concept.containsProperty("Director")) {
		{{#if: {{{Director|}}}|{{#arraymap:{{{Director|}}}|;|x|[[Category:Works by {{#getdisplaytitle:x}}]]|}}}}
	}
	@if(concept.containsProperty("Performer")) {
		{{#if: {{{Performer|}}}|{{#arraymap:{{{Performer|}}}|;|x|[[Category:Works starring {{#getdisplaytitle:x}}]]|}}}}
	}
	@if(concept.containsProperty("Narrator")) {
		{{#if: {{{Narrator|}}}|{{#arraymap:{{{Narrator|}}}|;|x|[[Category:Works starring {{#getdisplaytitle:x}}]]|}}}}
	}
	
	@*Might be different between the wikis.*@
	@*@if(subPages.contains("Template:Infobox/"+concept.getName()+"/Categories")) {
		{{Infobox/@concept.getName()/Categories
			@for(prop:concept.getProperties()) {|@prop.getName() = {{{@prop.getName()|}}}}
			@for(prop:concept.getGeneratedProperties()) {|@prop.getName() = {{{@prop.getName()|}}}}
		}}
	}*@
	</includeonly>
}
