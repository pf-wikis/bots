@import io.github.pfwikis.bots.common.WikiAPI
@import static io.github.pfwikis.bots.facts.SFactsProperties.*
@import static io.github.pfwikis.bots.utils.StringHelper.*
@import static io.github.pfwikis.bots.utils.RockerHelper.*
@import java.net.URLEncoder
@import static java.nio.charset.StandardCharsets.UTF_8
@import org.apache.commons.lang3.StringUtils
@import com.google.common.primitives.Ints
@import io.github.pfwikis.bots.rest.endpoints.citetemplate.model.BookDef

@args(BookDef book, RPCiteParam param)

@year => {
	<span class="year" title="release year">
		@if(book.getReleaseYear()!=null) {
			@book.getReleaseYear()
		}
	</span>
}
@title => {
	<span class="title">
		@if(book.has(Represented_by_page)){
			[[@book.get(Represented_by_page)|@pageToTitle(book.getName())]]
		}
		else if(book.has(Website)) {
			[
				@book.get(Website)
				@if(book.isWebCitation() && param.hasLocation()) {
					&#35;@URLEncoder.encode(param.getLocation(), UTF_8)
				}
				@*space->*@ @book.getName()]
		}
		else {
			[[@book.getName()|@pageToTitle(book.getName())]]
		}
	</span>
}
@pages => {
	@if(book.isWebCitation()) {
		@if(param.hasLocation()) {
			<span class="location" title="a website anchor">, #@param.getLocation()</span>
		}
	}
	else {
		@if(param.hasShowAs()) {
			<span class="location" title="location: typically a book page">, @param.getShowAs()</span>
		} else if(param.hasLocation()) {
			<span class="location" title="location: typically a book page">
				, @param.getLocation()
				@if(Ints.tryParse(param.getLocation()) != null && param.hasEndPage()) {
					&ndash;@param.getEndPage()
				}
			</span>
		}
	}
}
@publisher => {
	@if(book.has(Publisher)) {
		<span class="publisher">
		@for((i,pub):book.get(Publisher)){
			@if(!i.first()){, }@pub.toWikiLink()
		}
		</span>
	}
	else if(book.has(Website_name)) {
		<span class="website-name">@book.get(Website_name)</span>
	}
}

<cite class="cite">
@***************** author ***************@
<span class="authors">
@with(authorRanges = book.getAuthorPageRanges()) {
	@with(authorCases = book.getAuthorSpecialCases()) {
		@if(param.getIntLocation() != null) {
			@?authorRanges.get(param.getIntLocation())
		}
		else {
			@authorCases.getOrDefault(param.getLocation(), book.getAuthorsString())
		}
	}
}
</span>
.@*important space*@ @*important space end*@
@***************** article ***************@
@with(articleRanges = book.getArticlePageRanges()) {
	@with(articleCases = book.getArticleSpecialCases()) {
		@if(param.getIntLocation() != null && articleRanges.get(param.getIntLocation())!=null) {
			<span class="article">“
			@articleRanges.get(param.getIntLocation())
			” in @*important space before*@</span>
		}
		else if(articleCases.containsKey(param.getLocation())) {
			<span class="article">“@articleCases.get(param.getLocation())” in @*important space before*@</span>
		}
	}
}
@*space after this is important*@ @title
@pages. @publisher
@if(book.has(Publisher) || book.has(Website_name)) {, }else { }
@year</cite>

@if("??".equals(param.getLocation())){[[Category:Articles with question-mark page citations]]}
